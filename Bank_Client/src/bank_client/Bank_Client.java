/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package bank_client;

import Protocol.Request;
import Protocol.Response;
import SSL.SSL;
import java.awt.Color;
import java.awt.Component;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.System.exit;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocket;

/**
 *
 * @author Thibault
 */
public class Bank_Client extends javax.swing.JFrame
{
    
    private SSLSocket cSock;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private int PORT;
    private String IP;
    
    public Bank_Client()
    {
        initComponents();
        
        this.bDemande.setEnabled(false);
        this.lbID.setEnabled(false);
        this.tfID.setEnabled(false);
        
        // <editor-fold defaultstate="collapsed" desc="Init Properties">
        /*
        try
        {
        Properties prop = new Properties();
        FileOutputStream fos = new FileOutputStream("Bank_Client.properties");
        prop.setProperty("port", "7300");
        prop.setProperty("ip", "127.0.0.1");
        
        prop.store(fos, null);
        }
        catch(Exception ex){}
        */
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="Load Properties">
        try
        {
            Properties prop = new Properties();
            FileInputStream fis = new FileInputStream("Bank_Client.properties");
            prop.load(fis);
            
            PORT = Integer.parseInt(prop.getProperty("port", "7300"));
            IP = prop.getProperty("ip", "127.0.0.1");
            
            fis.close();
        } catch (IOException ex)
        {
            Logger.getLogger(Bank_Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        // </editor-fold>
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pConnexion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfBanque = new javax.swing.JTextField();
        bConnexion = new javax.swing.JButton();
        Status = new javax.swing.JLabel();
        pRequest = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbAction = new javax.swing.JComboBox();
        lbMontant = new javax.swing.JLabel();
        spMontant = new javax.swing.JSpinner();
        lbID = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        Reponse = new javax.swing.JLabel();
        bDemande = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        pConnexion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connexion", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pConnexion.setLayout(new java.awt.GridLayout(0, 2));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nom de la Banque");
        pConnexion.add(jLabel1);
        pConnexion.add(tfBanque);

        bConnexion.setText("Connexion");
        bConnexion.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bConnexionActionPerformed(evt);
            }
        });
        pConnexion.add(bConnexion);

        Status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Status.setOpaque(true);
        pConnexion.add(Status);

        pRequest.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Requètes", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pRequest.setLayout(new java.awt.GridLayout(0, 2));

        jLabel2.setText("Action");
        pRequest.add(jLabel2);

        cbAction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Demande de crédit", "Demande de débit", "Etat d'une transaction" }));
        cbAction.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cbActionItemStateChanged(evt);
            }
        });
        pRequest.add(cbAction);

        lbMontant.setText("Montant");
        pRequest.add(lbMontant);

        spMontant.setModel(new javax.swing.SpinnerNumberModel(100, 0, 1000000, 1));
        pRequest.add(spMontant);

        lbID.setText("Id");
        pRequest.add(lbID);
        pRequest.add(tfID);

        Reponse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Reponse.setOpaque(true);
        pRequest.add(Reponse);

        bDemande.setText("Demande");
        bDemande.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bDemandeActionPerformed(evt);
            }
        });
        pRequest.add(bDemande);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pRequest, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bConnexionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bConnexionActionPerformed
    {//GEN-HEADEREND:event_bConnexionActionPerformed
        try
        {
            cSock = SSL.getSSLSocket(IP, PORT);
            ois = new ObjectInputStream(cSock.getInputStream());
            oos = new ObjectOutputStream(cSock.getOutputStream());
            if(ois == null || oos == null)
            {
                this.Status.setText("Echec : flux non créés");
                this.Status.setBackground(Color.red);
            }
            else
            {
                this.Status.setText("Connecté");
                this.Status.setBackground(Color.GREEN);
            }
            
            Request req = new Request();
            req.setName("BanqueName");
            req.setContent(this.tfBanque.getText());
            oos.writeObject(req);
            
            Response rep;
            rep = (Response)ois.readObject();
            if(rep.getStatus() == true)
            {
                this.Status.setText("Connecté, Banque Connue");
                this.Status.setBackground(Color.GREEN);
                this.pConnexion.setEnabled(false);
                for (Component c : this.pConnexion.getComponents())
                    c.setEnabled(false);
                this.bDemande.setEnabled(true);
            }
            else
            {
                this.Status.setText("Banque inconnue");
                this.Status.setBackground(Color.RED);
            }
            
        }
        catch (Exception ex)
        {
            Logger.getLogger(Bank_Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bConnexionActionPerformed

    private void cbActionItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbActionItemStateChanged
    {//GEN-HEADEREND:event_cbActionItemStateChanged
        if(this.cbAction.getSelectedIndex() == 0 || this.cbAction.getSelectedIndex() == 1)
        {
            this.lbMontant.setEnabled(true);
            this.spMontant.setEnabled(true);
            this.lbID.setEnabled(false);
            this.tfID.setEnabled(false);
        }
        if(this.cbAction.getSelectedIndex() == 2)
        {
            this.lbMontant.setEnabled(false);
            this.spMontant.setEnabled(false);
            this.lbID.setEnabled(true);
            this.tfID.setEnabled(true);
        }
    }//GEN-LAST:event_cbActionItemStateChanged

    private void bDemandeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bDemandeActionPerformed
    {//GEN-HEADEREND:event_bDemandeActionPerformed
        int selection = this.cbAction.getSelectedIndex();
        Request req = new Request();
        switch(selection)
        {
            case 0: // Demande de crédit
            {
                req.setName("credit");
                req.setMontant((int)this.spMontant.getValue());
            }break;
            case 1: // Demande de débit
            {
                req.setName("debit");
                req.setMontant((int)this.spMontant.getValue());
            }break;
            case 2: // Etat d'une transaction
            {
                req.setName("etat");
                req.setContent(this.tfID.getText());
            }break;
        }
        try
        {
            oos.writeObject(req);
            //System.out.println("Demande envoyée");
            Response rep = (Response)ois.readObject();
            switch(rep.getName())
            {
                case "credit":
                {
                    if(rep.getStatus())
                    {
                        this.Reponse.setText("Demande enregistrée");
                        this.Reponse.setBackground(Color.green);
                    }
                    else
                    {
                        this.Reponse.setText("Demande refusée");
                        this.Reponse.setBackground(Color.red);
                    }
                }break;
                case "debit":
                {
                    if(rep.getStatus())
                    {
                        this.Reponse.setText("Demande enregistrée");
                        this.Reponse.setBackground(Color.green);
                    }
                    else
                    {
                        this.Reponse.setText("Demande refusée");
                        this.Reponse.setBackground(Color.red);
                    }
                }break;
                case "etat":
                {
                    if(rep.getStatus())
                    {
                        String str = "Montant : " + rep.getMontant() + " - Validé : ";
                        if(rep.getValide())
                            str += "OUI";
                        else
                            str += "NON";
                        this.Reponse.setText(str);
                        this.Reponse.setBackground(Color.green);
                    }
                    else
                    {
                        if(rep.getValide())
                            this.Reponse.setText("Transaction inexistante");
                        else
                            this.Reponse.setText("Mauvaise Banque");
                        this.Reponse.setBackground(Color.red);
                    }
                }break;
            }
        }
        catch (IOException | ClassNotFoundException ex)
        {
            Logger.getLogger(Bank_Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bDemandeActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        try
        {
            Request req = new Request();
            req.setName("END");
            oos.writeObject(req);
            System.out.println("Closing");
            ois.close();
            oos.close();
            cSock.close();
            exit(0);
        } catch (Exception ex)
        {
            exit(0);
        }
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Bank_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Bank_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Bank_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Bank_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Bank_Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Reponse;
    private javax.swing.JLabel Status;
    private javax.swing.JButton bConnexion;
    private javax.swing.JButton bDemande;
    private javax.swing.JComboBox cbAction;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbMontant;
    private javax.swing.JPanel pConnexion;
    private javax.swing.JPanel pRequest;
    private javax.swing.JSpinner spMontant;
    private javax.swing.JTextField tfBanque;
    private javax.swing.JTextField tfID;
    // End of variables declaration//GEN-END:variables
}
